DROP USER pra_ut4 CASCADE;
-- crear un nuevo usuario
CREATE USER pra_ut4 IDENTIFIED BY dam1a;
-- permitir al usuario conectarse a la base de datos:
grant connect to pra_ut4;
-- otorgar privilegios para crear objetos de base de datos:
grant resource to pra_ut4;
-- proporcionar la cuota en todos los espacios de tablas con tablas BPM
grant unlimited tablespace to pra_ut4;
grant create view to pra_ut4;



-- Crear tabla UBICACION
CREATE TABLE PRA_UT4.UBICACION (
    ID_UBICACION NUMBER PRIMARY KEY,
    DIRECCION VARCHAR2(100) NOT NULL,
    CIUDAD VARCHAR2(50) NOT NULL
);

-- Crear tabla DEPARTAMENTO
CREATE TABLE PRA_UT4.DEPARTAMENTO (
    ID_DEPARTAMENTO NUMBER PRIMARY KEY,
    NOMBRE VARCHAR2(50) NOT NULL,
    UBICACION_ID NUMBER REFERENCES pra_ut4.UBICACION(ID_UBICACION)
);

-- Crear tabla EMPLEADO (relación reflexiva: Jefe)
CREATE TABLE PRA_UT4.EMPLEADO (
    ID_EMPLEADO NUMBER PRIMARY KEY,
    NOMBRE VARCHAR2(50) NOT NULL,
    ID_DEPARTAMENTO NUMBER REFERENCES pra_ut4.DEPARTAMENTO(ID_DEPARTAMENTO),
    ID_JEFE NUMBER NULL REFERENCES pra_ut4.EMPLEADO(ID_EMPLEADO)
);


-- Crear tabla PROYECTO
CREATE TABLE PRA_UT4.PROYECTO (
    ID_PROYECTO NUMBER PRIMARY KEY,
    NOMBRE VARCHAR2(50) NOT NULL,
    PRESUPUESTO NUMBER(8,2) NOT NULL,
    ID_DEPARTAMENTO NUMBER REFERENCES pra_ut4.DEPARTAMENTO(ID_DEPARTAMENTO)
);


-- Crear tabla PARTICIPACION
CREATE TABLE PRA_UT4.PARTICIPACION (
    ID_EMPLEADO NUMBER REFERENCES pra_ut4.EMPLEADO(ID_EMPLEADO),
    ID_PROYECTO NUMBER REFERENCES pra_ut4.PROYECTO(ID_PROYECTO),
    HORAS_ASIGNADAS NUMBER CHECK (HORAS_ASIGNADAS >= 0),
    PRIMARY KEY (ID_EMPLEADO, ID_PROYECTO)
);


-- Inserts de ejemplo para UBICACION
INSERT INTO PRA_UT4.UBICACION VALUES (1, 'Av. Principal 123', 'Madrid');
INSERT INTO PRA_UT4.UBICACION VALUES (2, 'Calle Secundaria 456', 'Sevilla');
INSERT INTO PRA_UT4.UBICACION VALUES (3, 'Plaza Central 789', 'Badajoz');


-- Inserts de ejemplo para DEPARTAMENTO
INSERT INTO PRA_UT4.DEPARTAMENTO VALUES (1, 'Recursos Humanos', 1);
INSERT INTO PRA_UT4.DEPARTAMENTO VALUES (2, 'TI', 2);
INSERT INTO PRA_UT4.DEPARTAMENTO VALUES (3, 'Marketing', 3);



-- Inserts de ejemplo para EMPLEADO (incluyendo relación reflexiva)
INSERT INTO PRA_UT4.EMPLEADO VALUES (1, 'Ana', 1, NULL); -- Ana es jefe
INSERT INTO PRA_UT4.EMPLEADO VALUES (2, 'Luis', 2, NULL); -- Luis es jefe
INSERT INTO PRA_UT4.EMPLEADO VALUES (3, 'María', 1, 1); -- María trabaja para Ana
INSERT INTO PRA_UT4.EMPLEADO VALUES (4, 'Carlos', 2, 2); -- Carlos trabaja para Luis
INSERT INTO PRA_UT4.EMPLEADO VALUES (5, 'Sofía', 3, NULL); -- Sofía es jefe
INSERT INTO PRA_UT4.EMPLEADO VALUES (6, 'Diego', 1, 1); -- Diego trabaja para Ana
INSERT INTO PRA_UT4.EMPLEADO VALUES (7, 'Paula', 3, 5); -- Paula trabaja para Sofía
INSERT INTO PRA_UT4.EMPLEADO VALUES (8, 'Ricardo', 2, 2); -- Ricardo trabaja para Luis
INSERT INTO PRA_UT4.EMPLEADO VALUES (9, 'Elena', 3, 5); -- Elena trabaja para Sofía
INSERT INTO PRA_UT4.EMPLEADO VALUES (10, 'Fernando', 3, 5); -- Fernando trabaja para Sofía


-- Inserts de ejemplo para PROYECTO
INSERT INTO PRA_UT4.PROYECTO VALUES (1, 'Intranet Corporativa', 20653.78, 2);
INSERT INTO PRA_UT4.PROYECTO VALUES (2, 'Plan de Marketing', 15010.30, 3);
INSERT INTO PRA_UT4.PROYECTO VALUES (3, 'Capacitación Interna', 200000.00, 1);
INSERT INTO PRA_UT4.PROYECTO VALUES (4, 'Mejora de servicios en red', 325412.23, 2);


-- Inserts de ejemplo para PARTICIPACION
INSERT INTO PRA_UT4.PARTICIPACION VALUES (3, 1, 20); -- María trabaja en "Intranet Corporativa"
INSERT INTO PRA_UT4.PARTICIPACION VALUES (4, 4, 30); -- Carlos trabaja en "Mejora de servicios en red"
INSERT INTO PRA_UT4.PARTICIPACION VALUES (4, 1, 10); -- Carlos trabaja en "Intranet Corporativa"
INSERT INTO PRA_UT4.PARTICIPACION VALUES (5, 2, 15); -- Sofía trabaja en "Plan de Marketing"
INSERT INTO PRA_UT4.PARTICIPACION VALUES (7, 2, 25); -- Paula trabaja en "Plan de Marketing"
INSERT INTO PRA_UT4.PARTICIPACION VALUES (6, 3, 10); -- Diego trabaja en "Capacitación Interna"
INSERT INTO PRA_UT4.PARTICIPACION VALUES (6, 4, 40); -- Diego trabaja en "Mejora de servicios en red"
INSERT INTO PRA_UT4.PARTICIPACION VALUES (1, 3, 40); -- Ana trabaja en "Capacitación Interna"

--ACTIVIDAD 1: LISTAR LOS DEPARTAMENTES CON MÁS DE DOS EMPLEADOS
SELECT d.NOMBRE AS NOM_DEP, COUNT(e.ID_EMPLEADO) AS NUM_EMP
FROM DEPARTAMENTO d
LEFT JOIN EMPLEADO e ON d.ID_DEPARTAMENTO = e.ID_DEPARTAMENTO
GROUP BY d.NOMBRE
HAVING COUNT(e.ID_EMPLEADO) > 2;


--ACTIVIDAD 2: LISTAR LOS PROYECTOS Y LA CANTIDAD TOTAL DE HORAS ASIGNADAS.
SELECT p.NOMBRE AS NOM_PRO, SUM(par.HORAS_ASIGNADAS) AS TOT_HOR
FROM PROYECTO p JOIN PARTICIPACION par ON p.ID_PROYECTO = par.ID_PROYECTO
GROUP BY p.NOMBRE;


--ACTIVIDAD 3: LISTAR LOS JEFES Y EL NÚMERO DE EMPLEADOS QUE TIENEN A SU CARGO.
SELECT jefe.NOMBRE AS NOM_JEF, COUNT(e.ID_EMPLEADO) AS NUM_EMP
FROM EMPLEADO e JOIN EMPLEADO jefe ON e.ID_JEFE = jefe.ID_EMPLEADO
GROUP BY jefe.NOMBRE;


--ACTIVIDAD 4: OBTENER LOS EMPLEADOS QUE TRABAJAN MÁS HORAS QUE EL PROMEDIO EN SUS PROYECTOS.
SELECT e.NOMBRE AS NOMBRE_EMPLEADO, p.NOMBRE AS NOMBRE_PROYECTO, par.HORAS_ASIGNADAS
FROM PARTICIPACION par JOIN EMPLEADO e ON par.ID_EMPLEADO = e.ID_EMPLEADO JOIN PROYECTO p ON  par.ID_PROYECTO = p.ID_PROYECTO
WHERE  par.HORAS_ASIGNADAS > (
SELECT AVG(sub_par.HORAS_ASIGNADAS)
FROM PARTICIPACION sub_par
WHERE sub_par.ID_PROYECTO = par.ID_PROYECTO);
       
       
--ACTIVIDAD 5: LISTAR LOS EMPLEADOS JUNTO CON EL NÚMERO DE PROYECTOS EN LOS QUE PARTICIPA CADA UNO.
SELECT e.NOMBRE AS NOMBRE_EMPLEADO, COUNT(par.ID_PROYECTO) AS NUMERO_PROYECTOS
FROM EMPLEADO e LEFT JOIN PARTICIPACION par ON e.ID_EMPLEADO = par.ID_EMPLEADO
GROUP BY e.NOMBRE;


--ACTIVIDAD 6: CREA UNA VISTA LLAMADA DEP_UBI_PRE QUE MUESTRE UNA LISTA DE LOS DEPARTAMENTOS JUNTO CON SU 
--UBICACIÓN Y EL PRESUPUESTO TOTAL DE LOS PROYECTOS ASOCIADOS A CADA DEPARTAMENTO. LA CONSULTA DEBE INCLUIR
--EL NOMBRE DEL DEPARTAMENTO, LA CIUDAD DE LA UBICACIÓN, Y LA SUMA DE LOS PRESUPUESTOS DE LOS PROYECTOS DEL DEPARTAMENTO.
CREATE VIEW PRA_UT4.dep_ubi_pre AS
SELECT d.NOMBRE AS NOMBRE_DEPARTAMENTO, u.CIUDAD AS CIUDAD_UBICACION, 
COALESCE(SUM(p.PRESUPUESTO), 0) AS PRESUPUESTO_TOTAL
FROM DEPARTAMENTO d
LEFT JOIN UBICACION u ON d.UBICACION_ID = u.ID_UBICACION
LEFT JOIN PROYECTO p ON d.ID_DEPARTAMENTO = p.ID_DEPARTAMENTO
GROUP BY d.NOMBRE, u.CIUDAD;
--PARA CONSULTAR LA VISTA: "SELECT * FROM PRA_UT4.dep_ubi_pre;"


--ACTIVIDAD 7: OBTENER EL NOMBRE DE LOS EMPLEADOS, EL NOMBRE DEL DEPARTAMENTO AL QUE PERTENECEN,
--EL NOMBRE DE SU JEFE (SI TIENEN UNO), LA CANTIDAD DE PROYECTOS EN LOS QUE PARTICIPAN, Y EL TOTAL
--DE HORAS ASIGNADAS A DICHOS PROYECTOS.
SELECT e.NOMBRE AS EMPLEADO, d.NOMBRE AS DEPARTAMENTO, j.NOMBRE AS JEFE, COUNT(p.ID_PROYECTO) AS CANTIDAD_PROYECTOS,
SUM(par.HORAS_ASIGNADAS) AS HORAS_TOTALES
FROM EMPLEADO e
LEFT JOIN EMPLEADO j ON e.ID_JEFE = j.ID_EMPLEADO
LEFT JOIN DEPARTAMENTO d ON e.ID_DEPARTAMENTO = d.ID_DEPARTAMENTO
LEFT JOIN PARTICIPACION par ON e.ID_EMPLEADO = par.ID_EMPLEADO
LEFT JOIN PROYECTO p ON par.ID_PROYECTO = p.ID_PROYECTO
GROUP BY e.NOMBRE, d.NOMBRE, j.NOMBRE;


--ACTIVIDAD 8: CREA UNA VISTA LLAMADA PRE_PRO_HOR QUE TENGA UNA LISTA CON EL NOMBRE DE LOS PROYECTOS,
--EL NÚMERO DE EMPLEADOS ASIGNADOS A CADA PROYECTO, EL PRESUPUESTO TOTAL DEL PROYECTO, LAS HORAS DE 
--EMPLEADOS QUE TIENE ASIGNADA ESE PROYECTO Y EL PRESUPUESTO POR HORAS ASIGNADAS. EL PRESUPUESTO POR HORAS 
--DEBE CALCULARSE DIVIDIENDO EL PRESUPUESTO TOTAL ENTRE EL TOTAL DE HORAS ASIGNADAS.
CREATE  VIEW PRA_UT4.pre_pro_hor AS 
SELECT p.NOMBRE AS NOMBRE_PROYECTO, COUNT(par.ID_EMPLEADO) AS NUM_EMPLEADOS_ASIGNADOS,
p.PRESUPUESTO AS PRESUPUESTO_TOTAL, SUM(par.HORAS_ASIGNADAS) AS HORAS_TOTALES, p.PRESUPUESTO / SUM(par.HORAS_ASIGNADAS) AS PRESUPUESTO_POR_HORA
FROM PROYECTO p
LEFT JOIN PARTICIPACION par ON p.ID_PROYECTO = par.ID_PROYECTO
GROUP BY p.NOMBRE, p.PRESUPUESTO;


--ACTIVIDAD 9: OBTENER EL TOTAL DE HORAS ASIGNADAS A LOS EMPLEADOS POR CADA DEPARTAMENTO, CALCULANDO LAS HORAS TRABAJADAS POR CADA EMPLEADO 
--EN PROYECTOS Y LUEGO SUMÁNDOLAS POR DEPARTAMENTO. EL RESULTADO DEBERÁ MOSTRAR DOS COLUMNAS, EL NOMBRE DEL DEPARTAMENTO Y
--LAS HORAS TOTALES DEL DEPARTAMENTO.
SELECT d.NOMBRE AS NOMBRE_DEPARTAMENTO, SUM(par.HORAS_ASIGNADAS) AS HORAS_TOTALES_DEPARTAMENTO
FROM DEPARTAMENTO d
LEFT JOIN EMPLEADO e ON d.ID_DEPARTAMENTO = e.ID_DEPARTAMENTO
LEFT JOIN PARTICIPACION par ON e.ID_EMPLEADO = par.ID_EMPLEADO
GROUP BY d.NOMBRE;


--ACTIVIDAD 10: OBTENER LISTA DE EMPLEADOS JUNTO CON SU ID E INCLUYENDO EL NOMBRE DEL DEPARTAMENTO AL QUE PERTENECEN, EL NUMERO TOTAL DE PROYECTOS
--EN LOS QUE PARTICIPAN, LAS HORAS TOTALES ASIGNADAS A ESOS PROYECTOS, Y EL PROMEDIO DE HORAS TRABAJADAS POR LOS EMPLEADOS DE SU DEPARTAMENTO, CALCULANDO
-- A PARTIR DE LAS HORAS TOTALES DEDICADAS POR CADA EMPLEADO DEL MISMO DEPARTAMENTO, POR ÚLTIMO, OBTENER LA DIFERENCIA ENTRE EL TOTAL DE HORAS QUE DEDICA 
--CADA EMPLEADO CON LA MEDIA DE HORAS DEL DEPARTAMENTO. SE DEBERÁ DEVOLVER ORDENADOS POR LA DIFERENCIA DE HORAS DE FORMA ASCENDENTE. SE ENTIENDE QUE CUALQUIER 
--TRABAJADOR QUE NO TENGA HORAS ASIGNADAS A PROYECTOS DEBERÁ SALIR PRIMERO. LOS DECIMALES DEL PROMEDIO DE HORAS Y DE LA DIFERENCIA SE DEBERÁN REDONDEAR A DOS.
SELECT e.ID_EMPLEADO AS ID_EMPLEADO, e.NOMBRE AS NOMBRE_EMPLEADO, d.NOMBRE AS NOMBRE_DEPARTAMENTO, COUNT(par.ID_PROYECTO) AS TOTAL_PROYECTOS,
COALESCE(SUM(par.HORAS_ASIGNADAS), 0) AS HORAS_TOTALES_EMPLEADO,
FROM EMPLEADO e
LEFT JOIN DEPARTAMENTO d ON e.ID_DEPARTAMENTO = d.ID_DEPARTAMENTO -- Relacionar empleados con departamentos
LEFT JOIN PARTICIPACION par ON e.ID_EMPLEADO = pa.ID_EMPLEADO -- Relacionar empleados con proyectos
LEFT JOIN (
SELECT e1.ID_DEPARTAMENTO, e1.ID_EMPLEADO, SUM(COALESCE(par1.HORAS_ASIGNADAS, 0)) AS HORAS_TOTALES
FROM EMPLEADO e1
LEFT JOIN PARTICIPACION par1 ON e1.ID_EMPLEADO = par1.ID_EMPLEADO
GROUP BY e1.ID_DEPARTAMENTO, e1.ID_EMPLEADO) emp_dept ON e.ID_DEPARTAMENTO = emp_dept.ID_DEPARTAMENTO
GROUP BY e.ID_EMPLEADO, e.NOMBRE, d.NOMBRE
ORDER BY HORAS_DIFERENCIA ASC;




 





       







